package newpackage;



/**
 * Dynamic Queue Implementation using Circular Array
 * @author Ramesh Fadatare
 *
 */

import java.util.Random;
public class Dynamic_arr_queue {
  
    private int capacity = 2;
    int queueArr[];
    int front = 0;
    int rear = -1;
    int currentSize = 0;
     
    public Dynamic_arr_queue(){
        queueArr = new int[this.capacity];
    }

    public void enqueue(int item) {
         
        if (isQueueFull()) {
            System.out.println("Queue is full, increase capacity...");
            increaseCapacity();
        }
        rear++;
        if(rear >= queueArr.length && currentSize != queueArr.length){
            rear = 0;
        }
        queueArr[rear] = item;
        currentSize++;
        //System.out.println("Adding: " + item);
    }
 
    /**
     * this method removes an element from the top of the queue
     */
    public void dequeue() {
        if (isQueueEmpty()) {
            System.out.println("Underflow ! Unable to remove element from Queue");
        } else {
            front++;
            if(front > queueArr.length-1){
                //System.out.println("removed: "+queueArr[front-1]);
                front = 0;
            } else {
                //System.out.println("removed: "+queueArr[front-1]);
            }
            currentSize--;
        }
    }
 
    /**
     * This method checks whether the queue is full or not
     * @return boolean
     */
    public boolean isQueueFull(){
        boolean status = false;
        if (currentSize == queueArr.length){
            status = true;
        }
        return status;
    }
     
    /**
     * This method checks whether the queue is empty or not
     * @return
     */
    public boolean isQueueEmpty(){
        boolean status = false;
        if (currentSize == 0){
            status = true;
        }
        return status;
    }
     
    private void increaseCapacity(){
         
        //create new array with double size as the current one.
        int newCapacity = this.queueArr.length*2;
        int[] newArr = new int[newCapacity];
        //copy elements to new array, copy from rear to front
        int tmpFront = front;
        int index = -1;
        while(true){
            newArr[++index] = this.queueArr[tmpFront];
            tmpFront++;
            if(tmpFront == this.queueArr.length){
                tmpFront = 0;
            }
            if(currentSize == index+1){
                break;
            }
        }
        //make new array as queue
        this.queueArr = newArr;
        System.out.println("New array capacity: "+this.queueArr.length);
        //reset front & rear values
        this.front = 0;
        this.rear = index;
    }
     
    public static void main(String a[]){
         
        Dynamic_arr_queue queue = new Dynamic_arr_queue();
        Random r = new Random();
        
                
                 //============STAGE 01===============//
                for(int i=0 ;i<=2000;i++){
                    
                    long inTime = System.nanoTime(); //using System library
                    //take the system time at this point
                    //create random numbers, since it
                    //will create negative numbers, a bound has been created,
                    //which means it can generate numebrs form 0-50000 and equate to ele
                    //which will be sent to the function
                    queue.enqueue(r.nextInt(5000000));
                    long offTime = System.nanoTime(); // take the system time
                    //at this point
                    long totalTime = offTime - inTime; // calculate the time difference
                   
                    System.out.println(totalTime); //record the time to the output
                    
                
                }
                
                //============STAGE 02===============//
                for(int i=0 ;i<=18000;i++){
                    
                    long inTime = System.nanoTime(); //using System library
                    //take the system time at this point
                    //create random numbers, since it
                    //will create negative numbers, a bound has been created,
                    //which means it can generate numebrs form 0-50000 and equate to ele
                    //which will be sent to the function
                    queue.enqueue(r.nextInt(5000000));
                    queue.enqueue(r.nextInt(5000000));
                    queue.dequeue();
                    long offTime = System.nanoTime(); // take the system time
                    //at this point
                    long totalTime = offTime - inTime; // calculate the time difference
                   
                   System.out.println(totalTime); //record the time to the output
                    
                
                }
                /*
                //============STAGE 03===============//
                /*for(int i=0 ;i<=20000;i++){
                    
                    long inTime = System.nanoTime(); //using System library
                    //take the system time at this point
                    //create random numbers, since it
                    //will create negative numbers, a bound has been created,
                    //which means it can generate numebrs form 0-50000 and equate to ele
                    //which will be sent to the function
                    
                    q.queueDequeue();
                    long offTime = System.nanoTime(); // take the system time
                    //at this point
                    long totalTime = offTime - inTime; // calculate the time difference
                   
                    //System.out.println(totalTime); //record the time to the output
                    
                
                }*/
                
                //isFULL CHECK
                for(int i=0 ;i<=20000;i++){
                    
                    long inTime = System.nanoTime(); //using System library
                    //take the system time at this point
                    //create random numbers, since it
                    //will create negative numbers, a bound has been created,
                    //which means it can generate numebrs form 0-50000 and equate to ele
                    //which will be sent to the function
                    
                    queue.enqueue(r.nextInt(5000000));
                    queue.isQueueFull(); 
                    
                    long offTime = System.nanoTime(); // take the system time
                    //at this point
                    long totalTime = offTime - inTime; // calculate the time difference
                   
                    System.out.println(totalTime); //record the time to the output
                    
                
                }
                System.out.println("============================================ break =================================");
                //isEmpty CHECK=============================
                
                for(int i=0 ;i<=20000;i++){
                    
                    long inTime = System.nanoTime(); //using System library
                    //take the system time at this point
                    //create random numbers, since it
                    //will create negative numbers, a bound has been created,
                    //which means it can generate numebrs form 0-50000 and equate to ele
                    //which will be sent to the function
                    
                    queue.dequeue();
                    queue.isQueueEmpty(); 
                    
                    long offTime = System.nanoTime(); // take the system time
                    //at this point
                    long totalTime = offTime - inTime; // calculate the time difference
                   
                    System.out.println(totalTime); //record the time to the output
                    
                
                }
                
    
    
    }
}
